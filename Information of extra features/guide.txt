features of advance java to implement in pg
1. JWT
2. spring security in_memory form login
3. JPA one to many 
4. Rest JPA custom methods
5. CRUD JPA ----(basic starting point)
6. DTO class
7. Spring boot profile (various application.properties)
8. JUnit testing



Hello, I am Merlin! How can I assist you today?


interivew question with ans on jpa of spring boot
Here are some common interview questions related to Spring Data JPA along with their answers:

What is Spring Data JPA, and what are its main functions? 9

Answer: Spring Data JPA is a sub-project of Spring Data aimed at simplifying database access. It leverages the Java Persistence API (JPA) to reduce boilerplate code and provide a more streamlined coding experience. Its main functions include reducing repetitive coding tasks, automating basic CRUD operations, and providing support for advanced features like pagination and sorting.
How does Spring Data JPA simplify the development of data access layers? 9

Answer: Spring Data JPA simplifies data access layer development by providing a programming model that eliminates boilerplate code, supports query methods, and provides an abstraction over low-level database operations. It also offers built-in support for pagination and sorting, reducing the need for manual implementation.
Can you explain the concept of a repository in Spring Data JPA? 9

Answer: A repository in Spring Data JPA is an interface that allows for easy database interactions by abstracting the data access layer. It simplifies CRUD operations without boilerplate code and provides support for method-based query creation and custom SQL queries using annotations like @Query.
How can you integrate Spring Data JPA with a Spring Boot application? 2

Answer: To integrate Spring Data JPA with a Spring Boot application, you need to follow these steps:
Add the Spring Data JPA and database driver dependencies in your Maven or Gradle build file.
Configure the data source properties in the application.properties or application.yml file.

---------------------------------------------------------------------------------------------------------------------------------------
use of service layer in spring boot flow?
In a Spring Boot application, the service layer plays a crucial role in organizing business logic and coordinating data processing operations. The flow involving the service layer in a typical Spring Boot application can be described as follows:

Request Handling:

When an HTTP request is received by the Spring Boot application, it is typically routed to a controller class that contains request mapping methods.
Controller Interaction:

The controller methods may interact with the service layer to delegate business logic processing. This separation of concerns helps to keep controllers lightweight and focused on handling HTTP requests and responses.
Data Processing and Business Logic:

The service layer contains the business logic and performs data processing tasks such as validation, manipulation, and orchestration of data access operations.
Interaction with the Repository Layer:

The service layer interacts with the repository layer, which typically consists of interfaces that extend Spring Data repositories or custom-defined data access objects (DAOs). This interaction involves invoking methods to fetch, save, update, or delete data from the underlying data store (e.g., a database).
Transaction Management:

The service layer often serves as a boundary for transaction management, ensuring that multiple data access operations within a single business process are executed within a single transactional context. This helps to maintain data integrity and consistency.
Return Response:

After processing the request, the service layer may return the result back to the controller, which in turn prepares an appropriate response to be sent back to the client.
By following this flow, the service layer helps in keeping the business logic separate from the controller layer, promoting modularity, testability, and reusability of code within a Spring Boot application.