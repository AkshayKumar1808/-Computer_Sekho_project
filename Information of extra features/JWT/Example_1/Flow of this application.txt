when you run "Spring boot application" java file
	control goes to "MySecurityConfig.java" and 
it creates all the beans i.e. it calls all the methods where 
@Bean annotation is mentioned in the following sequence:

 @Bean 
	  public AuthenticationManager authenticationManagerBean(AuthenticationConfiguration configuration) throws
	  Exception


@Bean
	  public DaoAuthenticationProvider daoAuthenticationProvider()

@Bean public PasswordEncoder passwordEncoder() 

  @Bean	
	 public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception

that's why the output is:

		
		inside daoAuthenticationProvider method
		inside passwordEncoder method
		securityFilterChain method
		inside authenticationManagerBean method


now you open Postman and give following path in order to get the token


http://localhost:8080/token

	method - Post

	body
		raw type		JSON

		{
			"username":"scott",
			"password":"tiger"
		}

click on "send"


control goes to:
	"doFilterInternal()" method of "JWTAuthenticationFilter" class
	output:

		inside doFilterInternal method
		before calling doFilter of JWTAuthenticationFilter

this method tries to get "request.getHeader("Authorization")"
from the request. If the request token header does not start with "Bearer" [ yes it is not because we've just requested for a token, so our request does not have "Authorization" key with "Bearer" ] ,

because of "filterChain.doFilter(request, response);" , control goes to:

@PostMapping("/token")
	public ResponseEntity<?> generateToken(@RequestBody MyUser myuser) throws Exception

since the parameter here is "MyUser", control goes to 
	MyUser class and invokes its
		default constructor
		setters for username and password

output:
	MyUser default constructor
	MyUser set username method
	MyUser set password method

now control comes back inside "generateToken" method of "JwtController" class.

output:
	inside token method
	MyUser [username=scott, password=tiger]

because of 
	boolean result=repository.findUser(myuser);
control goes to "JwtRepository's findUser()" method

output:
	inside findUser method
if result is true,
	control goes to 
		customuserdetailsservice.setPassword(myuser.getPassword());

	CustomUserDetailsService's password field gets the value which user has typed in the Postman request.


because of "customuserdetailsservice.loadUserByUsername(myuser.getUsername())"
	control goes to "CustomUserDetailsService" class "loadUserByName()" method

output:
	inside loaduserbyname method

because of "this.jwtutil.generateToken(userdetails);"

control goes to "JwtUtil" class "generateToken()" method which calls "createToken()" method.

output:
		inside generateToken method
		inside createToken method

control comes back in "generateToken" of "JwtController" class.

because of    "System.out.println("JWT "+token);"

output:
	JWT eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzY290dCIsImV4cCI6MTY3NjkyMzkzMSwiaWF0IjoxNjc2ODg3OTMxfQ.eCCrOWL49ViOd4INri-0v5cG0Sg5fxOsIFiZ3J3AeTY


because of "return ResponseEntity.ok(new JwtResponse(token));"

output in Postman:

{
  "token": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzY290dCIsImV4cCI6MTY3NjkyMzkzMSwiaWF0IjoxNjc2ODg3OTMxfQ.eCCrOWL49ViOd4INri-0v5cG0Sg5fxOsIFiZ3J3AeTY"
}



next time
	
	when you run


	http://localhost:8080/hello
		method  Get
	header
		Authorization
			value
			Bearer<space>token which was generated in the last request
		

control goes to "doFilterInternal()" method of "JwtAuthenticationFilter" class

ouput:
	inside doFilterInternal method

if(requestTokenHeader!=null && requestTokenHeader.startsWith("Bearer "))

	the above condition is now true , that's why

because of "jwtutil.getUsernameFromToken()" control goes to "JwtUtil" class "getUsernameFromToken()" method which calls
	getClaimFromToken() method which calls
		getAllClaimFromToken() method

ouput:
	inside getUsernameFromToken method
	inside getClaimFromToken method
	inside getAllClaimsFromToken method

now the control comes back to "doFilterInternal()" method of "JwtAuthenticationFilter" class

because of "customuserdetailsservice.loadUserByUsername(username)"
method invocation control goes to "CustomUserDetailsService" class "loadUserByName()" method

output:
	inside loaduserbyname method

output:
	before calling doFilter of JWTAuthenticationFilter

because of "filterChain.doFilter(request, response);"
	control goes to :

@RestController
public class HelloController {
	
	@GetMapping("/hello")
	public String disp()
	{
		return "Hello World";
	}
}

and that's why output inside ARC is:
	Hello World


