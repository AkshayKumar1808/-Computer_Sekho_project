 MySecurityConfig    -  is the configuration class designed in order to define all the beans. 

JwtRepository
	- to check whether username and password passed through the request are correct (scott and tiger respectively) or not.

CustomUserDetailsService  -
	it creates a "User" class object with the help of username and password.

This method "loadUserByUsername" is later invoked by 
	generateToken() method of "JwtController" 
and by

JWTAuthenticationFilter method to check whether token contains the user "scott" or not.


JWTAuthenticationFilter  - It's a filter which checks if the request is for token, it just invokes a post request method of "JwtController". 
If the request has got a token ,it validates the token and invokes get request of "HelloController".


JwtController   - is the controller for "token" Post request
it gets userdetails from the request, invokes 
		generateToken(userdetails) of JwtUtil class, collects the token and sends it to the client through the response
		
		return ResponseEntity.ok(new JwtResponse(token));



HelloController -  is the controller for "hello" Get request


JwtUtil - is for 

refering to secret key which we've defined inside "application.properties" file.
@Value("${jwt.secret}")
	private String secret; 


generate token , create token   - to create token


getUsernameFromToken,getClaimFromToken, getAllClaimsFromToken 
	to validate the token


MyUser     -  to represent a user with instance members "username" and "password"


JwtResponse -  to represent the response
		return ResponseEntity.ok(new JwtResponse(token));

