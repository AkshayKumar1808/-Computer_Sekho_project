start STS

file
	new
		spring starter project

	spring_security_3

java
java 17
maven

next

spring boot version 3.0.8 snapshot
	[3.1.0 has got some issue regarding spring security configuration]



dependencies
	Spring Web
	Spring Boot DevTools
	Spring Security

next
	finish

your "SpringSecurity3Application.java" should be as follows:


package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ComponentScan;

@SpringBootApplication
@ComponentScan(basePackages="com.example.*")
public class SpringSecurity3Application {

	public static void main(String[] args) {
		SpringApplication.run(SpringSecurity1Application.class, args);
	}
}


create a package "com.example.controllers"

inside "com.example.controllers"
	create a class "HomeController"


package com.example.controllers;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/home")
public class HomeController 
{
	@GetMapping("/normal")
	public ResponseEntity<String> normalUser()
	{
		return ResponseEntity.ok("Hello from normal user");
	}
	@GetMapping("/public")
	public ResponseEntity<String> publicUser()
	{
		return ResponseEntity.ok("Hello from public user");
	}
	@GetMapping("/admin")
	public ResponseEntity<String> adminUser()
	{
		return ResponseEntity.ok("Hello from admin user");
	}
}

create a package
 
	com.example.config

inside this package create "SecurityConfig.java"

package com.example.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;
import static org.springframework.security.config.Customizer.withDefaults;
@Configuration
public class SecurityConfig 
{
	@Bean
	public PasswordEncoder passwordEncoder()
	{
		return new BCryptPasswordEncoder();
	}
	
	// for user configuration
	
	@Bean
	public UserDetailsService userDetailsService()
	{
		UserDetails normalUser=User
								.withUsername("scott")
								.password(passwordEncoder().encode("tiger"))
								.roles("NORMAL")
								.build();
		// not required as we've allowed 'public' to access without authentication
		/*
		 * UserDetails publicUser=User .withUsername("vita1")
		 * .password(passwordEncoder().encode("vita1")) .roles("PUBLIC") .build();
		 */
		UserDetails adminUser=User
				.withUsername("master")
				.password(passwordEncoder().encode("blaster"))
				.roles("ADMIN")
				.build();
		// InMemoryUserDetailsManager is a implementation of 
		// UserDetailsService
		InMemoryUserDetailsManager imd=new InMemoryUserDetailsManager(normalUser,adminUser);
		return imd;
	}

	// Using HttpSecurity we can configure which api can 
	// be accessed by whom, whether we want 'form-based' or 
	// 'basic' authentication
	@Bean
	public SecurityFilterChain filterChain(HttpSecurity hs) throws Exception
	{
		  hs.csrf(csrf->csrf.disable())
		  .authorizeHttpRequests(auth -> auth
		  .requestMatchers("/home/public")
		  .permitAll() 
		  .anyRequest() 
		  .authenticated())
		  .formLogin(withDefaults());
  		return hs.build();
			
	}
	
}



run "SpringSecurity3Application.java"



now go to the browser and type:

http://localhost:8080/home/public
	
	this will give you output 
		Hello from public

now type

http://localhost:8080/home/normal
	it will popup a window for accepting username and password

enter "scott" as a username and "tiger" as a password  [ which we have configured inside "SecurityConfig.java" ]



make sure it gives you output    "Hello from normal user"

similarly try out 

	http://localhost:8080/home/admin
		enter "master" as a username and "blaster" as a password  [ which we have configured inside "SecurityConfig.java" ]

make sure it gives you output

		Hello from normal admin


